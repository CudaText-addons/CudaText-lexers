object SyntAnal4: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id special'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Asm BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clMoneyGreen
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Incorrect'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BorderTypeBottom = blSolid
      BorderColorBottom = clRed
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 8236428
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment block'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?s)<\*.*?(\*>|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\.|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Bad number suffix'
      StyleName = 'Incorrect'
      Expression = '(?<=[\d'#39'])[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_][\w\$]*|\$\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '('#13#10'0x[\h_]* (\.[\h_]*)? p[\+\-]? \h[\h_]* |'#13#10'0x\h[\h_]* \. \h[\h' +
        '_]*'#13#10') (f(8|16|32|64|128)?)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '(0x[\h_]+|0o[0-7_]+|0b[01_]+)'#13#10'([ui](8|16|32|64|128)|UL{0,2}|L{1' +
        ',2})?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '('#13#10'\d[\d_]* (\.[\d_]*)? e[\+\-]?\d+ |'#13#10'\.[\d_]+e[\+\-]?\d+ |'#13#10'\d' +
        '[\d_]*\.(\d[\d_]*)? |'#13#10'\.\d[\d_]*'#13#10') (f(8|16|32|64|128)?)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num decimal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]*'#13#10'([ui](8|16|32|64|128)|UL{0,2}|L{1,2})?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ;'
      StyleName = 'Symbol'
      TokenType = 10
      Expression = ';'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 9
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        '\.+|\[<|>\]|:+|'#13#10'[~@\$\#\[\],]|!{2,}|&{2,}|\|{2,}|\+{2,}|\-{2,}|' +
        '={2,}|'#13#10'<<=?|>>=?|=>|\->|\?:|\?\??|'#13#10'[&\|\+\-/\*\^!%<>]=?|='#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'(\\.|.)*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String raw'
      StyleName = 'String'
      TokenType = 4
      Expression = '`(``|.)*?(`|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '$alignof'
            '$assert'
            '$assignable'
            '$case'
            '$default'
            '$defined'
            '$echo'
            '$else'
            '$embed'
            '$endfor'
            '$endforeach'
            '$endif'
            '$endswitch'
            '$error'
            '$eval'
            '$exec'
            '$extnameof'
            '$feature'
            '$for'
            '$foreach'
            '$if'
            '$include'
            '$is_const'
            '$nameof'
            '$offsetof'
            '$qnameof'
            '$sizeof'
            '$stringify'
            '$switch'
            '$typefrom'
            '$typeof'
            '$vaarg'
            '$vaconst'
            '$vacount'
            '$vaexpr'
            '$vasplat'
            '$vatype'
            'alias'
            'asm'
            'assert'
            'attrdef'
            'bitstruct'
            'break'
            'case'
            'catch'
            'const'
            'continue'
            'default'
            'defer'
            'do'
            'else'
            'enum'
            'false'
            'faultdef'
            'fn'
            'for'
            'foreach'
            'foreach_r'
            'if'
            'import'
            'interface'
            'macro'
            'module'
            'nextcase'
            'null'
            'return'
            'struct'
            'switch'
            'true'
            'try'
            'typedef'
            'union'
            'var'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id keywords compile-time'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'alignof'
            'assignable'
            'defined'
            'echo'
            'embed'
            'endfor'
            'endforeach'
            'endif'
            'endswitch'
            'error'
            'eval'
            'exec'
            'extnameof'
            'feature'
            'include'
            'is_const'
            'nameof'
            'offsetof'
            'qnameof'
            'sizeof'
            'stringify'
            'vaarg'
            'vaconst'
            'vacount'
            'vaexpr'
            'vasplat')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id modifiers'
      StyleName = 'Id special'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'align'
            'benchmark'
            'bigendian'
            'builtin'
            'callconv'
            'compact'
            'const'
            'deprecated'
            'dynamic'
            'export'
            'extern'
            'finalizer'
            'format'
            'init'
            'inline'
            'link'
            'littleendian'
            'local'
            'maydiscard'
            'naked'
            'noalias'
            'nodiscard'
            'noinit'
            'noinline'
            'nopadding'
            'norecurse'
            'noreturn'
            'nosanitize'
            'nostrip'
            'obfuscate'
            'operator'
            'operator_r'
            'operator_s'
            'optional'
            'overlap'
            'packed'
            'private'
            'public'
            'pure'
            'reflect'
            'safemacro'
            'section'
            'static'
            'tag'
            'tlocal'
            'unused'
            'used'
            'wasm'
            'weak'
            'winmain')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'any'
            'bfloat'
            'bool'
            'char'
            'double'
            'evaltype'
            'fault'
            'float'
            'float128'
            'float16'
            'ichar'
            'int'
            'int128'
            'iptr'
            'isz'
            'long'
            'short'
            'typefrom'
            'typeid'
            'typeof'
            'uint'
            'uint128'
            'ulong'
            'uptr'
            'ushort'
            'usz'
            'vatype'
            'void')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 512
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 512
        end
        item
          CondType = tcSkip
          TokenTypes = 14
        end
        item
          TagList.Strings = (
            'fn')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1~[(]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'struct'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'bitstruct'
            'struct'
            'union')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 4
      IgnoreAsParent = False
    end
    item
      DisplayName = 'enum'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 14
        end
        item
          TagList.Strings = (
            'enum')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 3
      IgnoreAsParent = False
    end
    item
      DisplayName = 'macro'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 526
        end
        item
          TagList.Strings = (
            'macro')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 6
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 256
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <
    item
      DisplayName = 'Asm'
      StyleName = 'Asm BG'
      StartExpression = '(?-i)\basm\s*\{'
      EndExpression = '\}'
      SyntAnalyzer = SyntAnal1
    end>
  SampleText.Strings = (
    'fn void func1(char[] name) //comment'
    '{'
    '    printf("Hello, %s!\n", name);'
    '    uint v = 0x20_30u64 + 2_0u128 + 2UL + 2LL; '
    '    float f = 1_2.3_4e5f64xx + 0xF_Ap20f64xx;'
    '}'
    ''
    '<* doc comment *>'
    'macro DEFINE_GET_SET(type, name)'
    '{'
    '    fn type get_##name(this)'
    '    {'
    '        return this.name;'
    '    }'
    ''
    '    fn void set_##name(this, type value)'
    '    {'
    '        this.name = value;'
    '    }'
    '}'
    ''
    'struct MyStruct'
    '{'
    '    int my_field;'
    '    DEFINE_GET_SET(int, my_field);'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Preprocessor'
    'Id keyword'
    'Symbol {}'
    'Symbol ()'
    'Symbol ;')
  Extentions = 'c3 c3i c3t'
  LexerName = 'C3'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
